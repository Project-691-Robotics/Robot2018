// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc691.Robot2018.subsystems;

import org.usfirst.frc691.Robot2018.RobotMap;
import org.usfirst.frc691.Robot2018.commands.*;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.command.Subsystem;

import com.ctre.phoenix.motorcontrol.ControlMode;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

public class Drivetrain extends Subsystem {
	private static double MOTOR_DRIVE_MAX = 0.8;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final WPI_TalonSRX leftTalon = RobotMap.drivetrainLeftTalon;
    private final WPI_TalonSRX rightTalon = RobotMap.drivetrainRightTalon;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public double kP = 0;
    public double kI = 0;
    public double kD = 0;
    public double kF = 0;

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new StickDrive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
    	kP = SmartDashboard.getNumber("kP", 0);
    	kI = SmartDashboard.getNumber("kI", 0);
    	kD = SmartDashboard.getNumber("kD", 0);
    	kF = SmartDashboard.getNumber("kF", 0);
    	setPIDF(kP, kI, kD, kF);
    	
    	SmartDashboard.putNumber("TL1", leftTalon.getMotorOutputPercent());
    	SmartDashboard.putNumber("TR1", rightTalon.getMotorOutputPercent());
    	SmartDashboard.putNumber("TLenc", leftTalon.getSelectedSensorPosition(0));
    	SmartDashboard.putNumber("TLspd", leftTalon.getSelectedSensorVelocity(0));
    	SmartDashboard.putNumber("TRenc", rightTalon.getSelectedSensorPosition(0));
    	SmartDashboard.putNumber("TRspd", rightTalon.getSelectedSensorVelocity(0));
    	//SmartDashboard.putNumber("TLtar", leftTalon.getClosedLoopTarget(0));
    	SmartDashboard.putNumber("TLerr", leftTalon.getClosedLoopError(0));
    	//SmartDashboard.putNumber("TRtar", -rightTalon.getClosedLoopTarget(0));
    	SmartDashboard.putNumber("TRerr", rightTalon.getClosedLoopError(0));
    }
    
    public void drive(double lspd, double rspd) {
    	leftTalon.set(ControlMode.PercentOutput, limit(lspd));
    	rightTalon.set(ControlMode.PercentOutput, limit(rspd));
    }
    
    public void driveArcade(double xspd, double zspd, boolean sqin) {
    	double leftOut, rightOut;
    	double maxInput = Math.copySign(Math.max(Math.abs(xspd), Math.abs(zspd)), xspd);
    	xspd = limit(xspd);
    	zspd = limit(zspd);
    	xspd = Math.copySign(xspd * xspd, xspd);
    	zspd = Math.copySign(zspd * zspd, zspd);
    	leftOut = (Math.signum(xspd) == Math.signum(zspd) ? maxInput : xspd + zspd);
    	rightOut = (Math.signum(xspd) == Math.signum(zspd) ? xspd - zspd : maxInput);
    	drive(leftOut * MOTOR_DRIVE_MAX, rightOut * MOTOR_DRIVE_MAX);
    }

    public void driveStick(Joystick stick) {
    	driveArcade(-stick.getY(), stick.getZ(), true);
    }
    
    public void driveStop() {
    	drive(0, 0);
    }
    
    public void drivePIDVelocity(double vel) {
    	leftTalon.set(ControlMode.Velocity, vel);
    	rightTalon.set(ControlMode.Velocity, vel);
    }
    
    public void setPIDF(double p, double i, double d, double f) {
    	leftTalon.config_kP(0, p, 0);
    	leftTalon.config_kI(0, i, 0);
    	leftTalon.config_kD(0, d, 0);
    	leftTalon.config_kF(0, f, 0);
    	rightTalon.config_kP(0, p, 0);
    	rightTalon.config_kI(0, i, 0);
    	rightTalon.config_kD(0, d, 0);
    	rightTalon.config_kF(0, f, 0);
    }
    
    public void resetEncoders() {
    	RobotMap.drivetrainLeftTalon.setSelectedSensorPosition(0, 0, 0);
    	RobotMap.drivetrainRightTalon.setSelectedSensorPosition(0, 0, 0);
    }
    
    public static double limit(double value) {
    	return Math.copySign(Math.min(Math.abs(value), 1), value);
    }
}
