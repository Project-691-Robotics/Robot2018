// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc691.Robot2018.commands;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc691.Robot2018.Robot;
import org.usfirst.frc691.Robot2018.RobotMap;
import org.usfirst.frc691.Robot2018.subsystems.Drivetrain;
import org.usfirst.frc691.Robot2018.subsystems.Elevator;
import org.usfirst.frc691.Robot2018.subsystems.Intake;
import org.usfirst.frc691.Robot2018.subsystems.Winch;

public class StickDrive extends Command {
	private static final int BUTTON_SWAP = 11;
	private static final int BUTTON_TWIST = 9;
	private static final int BUTTON_ELEV_UP = 3;
	private static final int BUTTON_ELEV_DN = 2;
	private static final int BUTTON_WINCH_UP = 4;
	private static final int BUTTON_WINCH_DN = 5;
	//private static int BUTTON_TMODE = 9;
	//private static int BUTTON_DIR = 8;
	//private static int BUTTON_DMODE = 12;
	//private static int BUTTON_STOP = 11;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
	private Joystick stick;
	private Joystick astick;
	private Drivetrain dt;
	private Winch winch;
	private Intake intake;
	private Elevator elev;
	
	private int swap = 1;
	private boolean twist = false;
	private int elevInv = 1;
	private int dmode = 0;
	private int tmode = 0;
	private int dir = 1;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public StickDrive() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    	stick = Robot.oi.getStick();
    	astick = Robot.oi.getAStick();
    	dt = Robot.drivetrain;
    	winch = Robot.winch;
    	intake = Robot.intake;
    	elev = Robot.elevator;
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
    	requires(dt);
    	/*requires(winch);
    	requires(intake);
    	requires(elev);*/
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    	System.out.println("Sdrive init");
    	swap = 1;
    	twist = false;
    	elevInv = 1;
    	dmode = 0;
    	tmode = -1;
    	dir = 1;
    	// TODO: Check if need reset
    	dt.resetEncoders();
    	
    	SmartDashboard.putNumber("swap", swap);
    	SmartDashboard.putNumber("dmode", dmode);
    	SmartDashboard.putNumber("tmode", tmode);
    	SmartDashboard.putNumber("dir", dir);
    	SmartDashboard.putNumber("DriveLeftSpeed", 0);
    	SmartDashboard.putNumber("DriveRightSpeed", 0);
    	SmartDashboard.putNumber("DrivePIDVelocity", 0);
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
    	if (stick.getRawButtonPressed(BUTTON_SWAP)) {
    		swap = -swap;
    		SmartDashboard.putNumber("swap", swap);
    	}
    	if (stick.getRawButtonPressed(BUTTON_TWIST)) {
    		twist = !twist;
    		SmartDashboard.putBoolean("twist", twist);
    	}
    	/*if (stick.getRawButtonPressed(BUTTON_ELEV_INV)) {
    		elevInv = -elevInv;
    		SmartDashboard.putNumber("elevInv", elevInv);
    	}*/
    	/*if (stick.getRawButtonPressed(BUTTON_DMODE)) {
    		dmode = (dmode + 1) % 3;
    		SmartDashboard.putNumber("dmode", dmode);
    	}
    	if (stick.getRawButtonPressed(BUTTON_STOP)) {
    		dt.resetEncoders();
    		SmartDashboard.putNumber("DriveLeftSpeed", 0);
        	SmartDashboard.putNumber("DriveRightSpeed", 0);
        	SmartDashboard.putNumber("DrivePIDVelocity", 0);
    	}
    	// Drivetrain
    	if (dmode == 0) {
    		dt.driveArcade(-swap * stick.getY(), (twist ? stick.getZ() : stick.getX()));
    	} else if (dmode == 1) {
    		dt.drive(SmartDashboard.getNumber("DriveLeftSpeed", 0), SmartDashboard.getNumber("DriveRightSpeed", 0));
    	} else {
    		dt.drivePIDVelocity(SmartDashboard.getNumber("DrivePIDVelocity", 0));
    	}*/
    	dt.driveArcade(-swap * stick.getY(), (twist ? stick.getZ() : stick.getX()));
    	// Intake
    	if (stick.getTrigger()) {
    		intake.driveDir(-1);
    	} else if (stick.getRawButton(2)) {
    		intake.driveDir(1);
    	} else {
    		intake.driveStop();
    	}
    	// Winch
    	//double t = (1 - astick.getThrottle()) / 2;
    	//SmartDashboard.putNumber("TestSpeed", t);
    	if (astick.getRawButton(BUTTON_WINCH_UP)) {
    		winch.driveDir(1);
    	} else if (astick.getRawButton(BUTTON_WINCH_DN)) {
    		winch.driveDir(-1);
    	} else {
    		winch.driveStop();
    	}
    	// Elevator
    	//boolean estop = false;
    	//int pov = astick.getPOV();
    	if (astick.getRawButton(BUTTON_ELEV_UP)) {
    		//elev.driveDir(elevInv);
    		elev.driveUp(elevInv);
    	} else if (astick.getRawButton(BUTTON_ELEV_DN)) {
    		//elev.driveDir(-elevInv);
    		elev.driveDown(elevInv);
    	} else {
    		//estop = true;
    		elev.driveStop();
    	}
    	// TEST
    	/*if (stick.getRawButtonPressed(BUTTON_DIR)) {
    		dir = -dir;
    		SmartDashboard.putNumber("dir", dir);
    	}
    	if (stick.getRawButtonPressed(BUTTON_TMODE)) {
    		tmode = (tmode + 1) % 2;
    		SmartDashboard.putNumber("tmode", tmode);
    	}
    	if (tmode == 1) {
    		winch.drive(dir * t);
    	}*/
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    	System.out.println("Sdrive end");
    	dt.driveStop();
    	winch.driveStop();
    	intake.driveStop();
    	elev.driveStop();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    	System.out.println("Sdrive interrupted");
    	end();
    }
}
