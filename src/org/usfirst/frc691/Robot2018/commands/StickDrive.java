// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc691.Robot2018.commands;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc691.Robot2018.Robot;
import org.usfirst.frc691.Robot2018.RobotMap;
import org.usfirst.frc691.Robot2018.subsystems.Drivetrain;
import org.usfirst.frc691.Robot2018.subsystems.Intake;
import org.usfirst.frc691.Robot2018.subsystems.Winch;

public class StickDrive extends Command {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
	private Joystick stick;
	private Drivetrain dt;
	private Winch winch;
	private Intake intake;
	private int dmode = 1;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public StickDrive() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    	stick = Robot.oi.getStick();
    	dt = Robot.drivetrain;
    	winch = Robot.winch;
    	intake = Robot.intake;
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
    	requires(dt);
    	requires(winch);
    	requires(intake);
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    	SmartDashboard.putNumber("dmode", dmode);
    	SmartDashboard.putNumber("DriveLeftSpeed", 0);
    	SmartDashboard.putNumber("DriveRightSpeed", 0);
    	SmartDashboard.putNumber("DrivePIDVelocity", 0);
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    	dmode = 1;
    	dt.resetEncoders();
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
    	if (stick.getRawButtonPressed(8)) {
    		dmode = (dmode + 1) % 3;
    		SmartDashboard.putNumber("dmode", dmode);
    	}
    	if (stick.getRawButtonPressed(11)) {
    		dt.resetEncoders();
    		SmartDashboard.putNumber("DriveLeftSpeed", 0);
        	SmartDashboard.putNumber("DriveRightSpeed", 0);
        	SmartDashboard.putNumber("DrivePIDVelocity", 0);
    	}
    	// Drivetrain
    	if (dmode == 0) {
    		dt.driveArcade(-stick.getY(), stick.getZ());
    	} else if (dmode == 1) {
    		dt.drive(SmartDashboard.getNumber("DriveLeftSpeed", 0), SmartDashboard.getNumber("DriveRightSpeed", 0));
    	} else {
    		dt.drivePIDVelocity(SmartDashboard.getNumber("DrivePIDVelocity", 0));
    	}
    	// Winch
    	if (stick.getTrigger()) {
    		winch.driveDir(1);
    	} else if (stick.getRawButton(2)) {
    		winch.driveDir(-1);
    	} else {
    		winch.driveStop();
    	}
    	// Intake
    	//intake.drive(stick.getThrottle());
    	SmartDashboard.putNumber("Throttle", stick.getThrottle());
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    	dt.driveStop();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    	end();
    }
}
